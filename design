设计模式的意义：
    使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强
    可以提高程序员的思维能力、编程能力和设计能力
    使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期
模式的经典定义：
    每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式，人们可以无数次地重用那些已有的解决方案，无须再重复相同的工作。
    模式是在特定环境下人们解决某类重复出现问题的一套成功或有效的解决方案。
    设计模式是在特定环境下为解决某一通用软件设计问题提供的一套定制的解决方案，该方案描述了对象和类之间的相互作用。
    Design patterns are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.
设计模式的基本要素 
    设计模式一般包含模式名称、问题、目的、解决方案、效果、实例代码和相关设计模式等基本要素，4个关键要素如下：
    模式名称 (Pattern Name) 
    问题 (Problem) 
    解决方案 (Solution) 
    效果 (Consequences) 
设计模式的分类
根据目的（模式是用来做什么的）可分为创建型(Creational)，结构型(Structural)和行为型(Behavioral)三类：
    创建型模式主要用于创建对象
    结构型模式主要用于处理类或对象的组合
    行为型模式主要用于描述类或对象如何交互和怎样分配职责
设计模式的分类
    根据范围，即模式主要是处理类之间的关系还是处理对象之间的关系，可分为类模式和对象模式两种：
        类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，是一种静态关系
        对象模式处理对象间的关系，这些关系在运行时变化，更具动态性

类之间的关系
       1.依赖（Dependency）关系
       依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式。
       在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。


