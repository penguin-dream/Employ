设计模式的意义：
    使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强
    可以提高程序员的思维能力、编程能力和设计能力
    使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期
模式的经典定义：
    每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式，人们可以无数次地重用那些已有的解决方案，无须再重复相同的工作。
    模式是在特定环境下人们解决某类重复出现问题的一套成功或有效的解决方案。
    设计模式是在特定环境下为解决某一通用软件设计问题提供的一套定制的解决方案，该方案描述了对象和类之间的相互作用。
    Design patterns are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.
设计模式的基本要素 
    设计模式一般包含模式名称、问题、目的、解决方案、效果、实例代码和相关设计模式等基本要素，4个关键要素如下：
    模式名称 (Pattern Name) 
    问题 (Problem) 
    解决方案 (Solution) 
    效果 (Consequences) 
设计模式的分类
根据目的（模式是用来做什么的）可分为创建型(Creational)，结构型(Structural)和行为型(Behavioral)三类：
    创建型模式主要用于创建对象
    结构型模式主要用于处理类或对象的组合
    行为型模式主要用于描述类或对象如何交互和怎样分配职责
设计模式的分类
    根据范围，即模式主要是处理类之间的关系还是处理对象之间的关系，可分为类模式和对象模式两种：
        类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，是一种静态关系
        对象模式处理对象间的关系，这些关系在运行时变化，更具动态性

面向对象的设计原则——开闭原则
开闭原则定义 
    开闭原则是面向对象的可复用设计的第一块基石，是最重要的面向对象设计原则
开闭原则：软件实体应当对扩展开放，对修改关闭。
    Open-Closed Principle (OCP): Software entities should be open for extension, but closed for modification.

里氏代换原则：所有引用基类的地方必须能透明地使用其子类的对象。
    Liskov Substitution Principle (LSP): Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.
    里氏代替原则的实现方法：
       子类可以扩展父类的功能，但不能改变父类原有的功能。

依赖倒转原则：高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
    Dependency Inversion Principle (DIP): High level modules should not depend upon low level modules, 
both should depend upon abstractions. Abstractions should not depend upon details, details should depend upon abstractions. 

单一职责原则定义
单一职责原则是最简单的面向对象设计原则，用于控制类的粒度大小
单一职责原则：一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中。
    Single Responsibility Principle (SRP): Every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. 

接口隔离原则：客户端不应该依赖那些它不需要的接口。
    Interface Segregation Principle (ISP): Clients should not be forced to depend upon interfaces that they do not use.

迪米特法则定义
迪米特法则又称为最少知识原则(Least Knowledge Principle, LKP)
迪米特法则：每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。
    Law of Demeter (LoD): Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.

合成复用原则定义
    合成复用原则又称为组合/聚合复用原则(Composition/ Aggregate Reuse Principle, CARP)
    合成复用原则：优先使用对象组合，而不是继承来达到复用的目的。
    Composite Reuse Principle (CRP)：Favor composition of objects over inheritance as a reuse mechanism.







